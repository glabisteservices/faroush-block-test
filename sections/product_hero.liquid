<style>
  .product-header_add-to-cart-wrapper {
    display: flex;
    flex-direction: column;
    grid-column-gap: 0.5rem;
    grid-row-gap: 0.5rem;
  }
  
  .is-red {
    background-color: hsla(19.74193548387097, 80.31%, 62.16%, 1.00);
    color: #f5f2d9;
  }
  
  .text-size-regular {
    font-family: Karla;
    color: #9e8c73;
    font-size: 1rem;
  }
  
  .button {
    padding: 0.65rem 1.5rem;
    border: 1px solid #6e612b;
    border-radius: 10px;
    background-color: transparent;
    font-family: Karla;
    color: #6e612b;
    font-weight: 500;
    text-align: center;
    white-space: nowrap;
    cursor: pointer;
    transition: all 0.3s ease;
  }
  
  .button:hover {
    background-color: #6e612b;
    color: #f5f2d9;
  }
  
  .product-item_tag {
    padding: 0.3rem 1.5rem;
    border-radius: 8px;
    background-color: #9e8c73;
    color: white;
    font-size: 0.85rem;
    font-weight: 500;
  }
  
  .heading-style-h4 {
    font-family: Karla;
    color: #6e612b;
    font-size: 1.25rem;
    line-height: 1.2;
    font-weight: 400;
  }
  
  .product-header_layout {
    display: grid;
    align-items: start;
    grid-template-columns: 1fr 1fr;
    grid-column-gap: 3rem;
    grid-row-gap: 2rem;
  }
  
  @media screen and (max-width: 768px) {
    .product-header_layout {
      grid-template-columns: 1fr;
      grid-column-gap: 0;
    }
  }
  
  /* Gallery Styles */
  .product-gallery-container {
    position: relative;
    width: 100%;
  }
  
  .product-gallery-main {
    position: relative;
    width: 100%;
    height: 500px;
    margin-bottom: 1rem;
    overflow: hidden;
    border-radius: 20px;
    background-color: #eee;
  }
  
  .gallery-image {
    width: 100%;
    height: 100%;
    object-fit: cover;
    object-position: center;
    transition: opacity 0.3s ease;
  }
  
  .gallery-image.hidden {
    opacity: 0;
    position: absolute;
    top: 0;
    left: 0;
  }
  
  /* Navigation Arrows - Positionnées en bas à droite */
  .gallery-navigation {
    position: absolute;
    bottom: 1rem;
    right: 1rem;
    display: flex;
    gap: 0.5rem;
    z-index: 10;
  }
  
  .nav-arrow {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 3rem;
    height: 3rem;
    background-color: rgba(245, 242, 217, 0.9);
    border: 1px solid #6e612b;
    border-radius: 50%;
    cursor: pointer;
    transition: all 0.3s ease;
    backdrop-filter: blur(5px);
  }
  
  .nav-arrow:hover {
    background-color: #6e612b;
    color: #f5f2d9;
  }
  
  .nav-arrow svg {
    width: 1.2rem;
    height: 1.2rem;
    color: currentColor;
  }
  
  .nav-arrow.prev svg {
    transform: rotate(180deg);
  }
  
  /* Thumbnails */
  .product-thumbnails {
    display: flex;
    gap: 0.5rem;
    overflow-x: auto;
    padding: 0.5rem 0;
  }
  
  .thumbnail-item {
    flex-shrink: 0;
    width: 80px;
    height: 80px;
    border-radius: 10px;
    overflow: hidden;
    cursor: pointer;
    border: 2px solid transparent;
    transition: border-color 0.3s ease;
  }
  
  .thumbnail-item.active {
    border-color: #6e612b;
  }
  
  .thumbnail-image {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }
  
  /* Product Details */
  .product-header_product-details {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
    padding: 1rem 0;
  }
  
  .product-title {
    font-family: Karla;
    color: #6e612b;
    font-size: 2rem;
    font-weight: 600;
    margin: 0;
  }
  
  .product-price-wrapper {
    display: flex;
    align-items: center;
    gap: 1rem;
  }
  
  .product-price {
    font-family: Karla;
    color: #6e612b;
    font-size: 1.5rem;
    font-weight: 600;
  }
  
  .product-compare-price {
    font-family: Karla;
    color: #9e8c73;
    font-size: 1.2rem;
    text-decoration: line-through;
  }
  
  .product-tags {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
  }
  
  .product-description {
    font-family: Karla;
    color: #6e612b;
    line-height: 1.6;
  }
  
  /* Variant Selection */
  .variant-selector {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }
  
  .variant-label {
    font-family: Karla;
    color: #6e612b;
    font-weight: 600;
  }
  
  .variant-select {
    padding: 0.75rem 1rem;
    border: 1px solid #6e612b;
    border-radius: 10px;
    background-color: transparent;
    font-family: Karla;
    color: #6e612b;
    font-size: 1rem;
    cursor: pointer;
  }
  
  /* Add to Cart */
  .add-to-cart-section {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }
  
  .add-to-cart-button {
    width: 100%;
    padding: 1rem;
    border: none;
    border-radius: 10px;
    background-color: hsla(19.74193548387097, 80.31%, 62.16%, 1.00);
    font-family: Karla;
    color: #f5f2d9;
    font-weight: 600;
    font-size: 1.1rem;
    cursor: pointer;
    transition: all 0.3s ease;
  }
  
  .add-to-cart-button:hover {
    background-color: hsla(19.74193548387097, 80.31%, 52.16%, 1.00);
  }
  
  .add-to-cart-button:disabled {
    background-color: #ccc;
    cursor: not-allowed;
  }
  
  .stock-status {
    font-family: Karla;
    font-size: 0.9rem;
    padding: 0.5rem;
    text-align: center;
    border-radius: 5px;
  }
  
  .in-stock {
    background-color: #e8f5e8;
    color: #2d5a2d;
  }
  
  .out-of-stock {
    background-color: #ffe8e8;
    color: #8b0000;
  }
  
  /* Shipping Info */
  .shipping-info {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 1rem 0;
    border-top: 1px solid rgba(0, 0, 0, 0.1);
    border-bottom: 1px solid rgba(0, 0, 0, 0.1);
  }
  
  .shipping-icon {
    width: 1.5rem;
    height: 1.5rem;
    color: #6e612b;
  }
  
  .shipping-text {
    font-family: Karla;
    color: #6e612b;
    font-size: 0.9rem;
  }
</style>

<div class="product-header_component">
  <div class="product-header_layout" 
       x-data="productGallery({{ product | json | escape }}, {{ product.selected_or_first_available_variant | json | escape }})"
       x-init="initGallery()">
    
    <!-- Gallery Section -->
    <div class="product-gallery-container">
      <div class="product-gallery-main">
        <!-- Main Images -->
        <template x-for="(media, index) in product.media" :key="media.id">
          <div x-show="currentImageIndex === index" x-transition:enter.duration.300ms>
            <img :src="media.preview_image ? media.preview_image.src.replace('.jpg', '_1000x1000.jpg') : ''"
                 :alt="media.alt || product.title"
                 class="gallery-image"
                 loading="lazy">
          </div>
        </template>
        
        <!-- Navigation Arrows -->
        <div class="gallery-navigation" x-show="product.media.length > 1">
          <button class="nav-arrow prev" @click="previousImage()" :disabled="currentImageIndex === 0">
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
            </svg>
          </button>
          <button class="nav-arrow next" @click="nextImage()" :disabled="currentImageIndex === product.media.length - 1">
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
            </svg>
          </button>
        </div>
      </div>
      
      <!-- Thumbnails -->
      <div class="product-thumbnails" x-show="product.media.length > 1">
        <template x-for="(media, index) in product.media" :key="media.id">
          <div class="thumbnail-item" 
               :class="{ 'active': currentImageIndex === index }"
               @click="setCurrentImage(index)">
            <img :src="media.preview_image ? media.preview_image.src.replace('.jpg', '_200x200.jpg') : ''"
                 :alt="media.alt || product.title"
                 class="thumbnail-image"
                 loading="lazy">
          </div>
        </template>
      </div>
    </div>
    
    <!-- Product Details Section -->
    <div class="product-header_product-details">
      <!-- Product Title -->
      <h1 class="product-title" x-text="product.title"></h1>
      
      <!-- Price -->
      <div class="product-price-wrapper">
        <span class="product-price" x-text="formatPrice(selectedVariant.price)"></span>
        <span class="product-compare-price" 
              x-show="selectedVariant.compare_at_price && selectedVariant.compare_at_price > selectedVariant.price"
              x-text="formatPrice(selectedVariant.compare_at_price)"></span>
        <span class="product-item_tag" x-show="selectedVariant.compare_at_price && selectedVariant.compare_at_price > selectedVariant.price">Sale</span>
      </div>
      
      <!-- Stock Status -->
      <div class="stock-status" 
           :class="selectedVariant.available ? 'in-stock' : 'out-of-stock'"
           x-text="selectedVariant.available ? 'En stock' : 'Rupture de stock'"></div>
      
      <!-- Product Tags -->
      <div class="product-tags" x-show="product.tags.length > 0">
        <template x-for="tag in product.tags.slice(0, 3)" :key="tag">
          <span class="product-item_tag" x-text="tag"></span>
        </template>
      </div>
      
      <!-- Product Description -->
      <div class="product-description" x-html="product.description"></div>
      
      <!-- Variant Selection -->
      <div x-show="product.options.length > 0">
        <template x-for="(option, optionIndex) in product.options" :key="option.name">
          <div class="variant-selector">
            <label class="variant-label" x-text="option.name"></label>
            <select class="variant-select" 
                    @change="updateSelectedVariant(optionIndex, $event.target.value)">
              <template x-for="value in option.values" :key="value">
                <option :value="value" 
                        :selected="selectedOptions[optionIndex] === value"
                        x-text="value"></option>
              </template>
            </select>
          </div>
        </template>
      </div>
      
      <!-- Shipping Info -->
      <div class="shipping-info">
        <svg class="shipping-icon" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4" />
        </svg>
        <span class="shipping-text">Livraison 1 - 3 jours</span>
      </div>
      
      <!-- Add to Cart Section -->
      <div class="add-to-cart-section">
        <button class="add-to-cart-button" 
                :disabled="!selectedVariant.available"
                @click="addToCart()"
                x-text="selectedVariant.available ? 'Ajouter au panier' : 'Rupture de stock'"></button>
      </div>
    </div>
  </div>
</div>

<script>
function productGallery(product, initialVariant) {
  return {
    product: product,
    selectedVariant: initialVariant,
    selectedOptions: [],
    currentImageIndex: 0,
    
    initGallery() {
      // Initialize selected options based on current variant
      if (this.selectedVariant && this.product.options) {
        this.selectedOptions = this.product.options.map((option, index) => {
          return this.selectedVariant[`option${index + 1}`];
        });
      }
    },
    
    nextImage() {
      if (this.currentImageIndex < this.product.media.length - 1) {
        this.currentImageIndex++;
      }
    },
    
    previousImage() {
      if (this.currentImageIndex > 0) {
        this.currentImageIndex--;
      }
    },
    
    setCurrentImage(index) {
      this.currentImageIndex = index;
    },
    
    updateSelectedVariant(optionIndex, value) {
      this.selectedOptions[optionIndex] = value;
      
      // Find matching variant
      const matchingVariant = this.product.variants.find(variant => {
        return this.selectedOptions.every((option, index) => {
          return variant[`option${index + 1}`] === option;
        });
      });
      
      if (matchingVariant) {
        this.selectedVariant = matchingVariant;
        
        // Update URL without page reload
        const newUrl = new URL(window.location);
        newUrl.searchParams.set('variant', matchingVariant.id);
        window.history.replaceState({}, '', newUrl);
      }
    },
    
    formatPrice(price) {
      return new Intl.NumberFormat('fr-FR', {
        style: 'currency',
        currency: 'EUR'
      }).format(price / 100);
    },
    
    addToCart() {
      if (!this.selectedVariant.available) return;
      
      const formData = {
        items: [{
          id: this.selectedVariant.id,
          quantity: 1
        }]
      };
      
      fetch('/cart/add.js', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(formData)
      })
      .then(response => response.json())
      .then(data => {
        // Trigger cart update event
        window.dispatchEvent(new CustomEvent('cart:updated', { detail: data }));
        
        // Optional: Show success message
        console.log('Produit ajouté au panier:', data);
      })
      .catch(error => {
        console.error('Erreur lors de l\'ajout au panier:', error);
      });
    }
  }
}
</script>

{% schema %}
{
  "tag": "section",
  "name": "Product Hero",
  "class": "Section-produit-fiche",
  "settings": [
    {
      "type": "checkbox",
      "id": "show_shipping_info",
      "label": "Afficher les informations de livraison",
      "default": true
    },
    {
      "type": "text",
      "id": "shipping_text",
      "label": "Texte de livraison",
      "default": "Livraison 1 - 3 jours"
    },
    {
      "type": "checkbox",
      "id": "show_product_tags",
      "label": "Afficher les tags produit",
      "default": true
    },
    {
      "type": "number",
      "id": "max_tags_display",
      "label": "Nombre maximum de tags à afficher",
      "default": 3
    }
  ],
  "blocks": [
    {
      "type": "product-name",
      "name": "Nom du produit",
      "limit": 1
    },
    {
      "type": "product-price",
      "name": "Prix du produit",
      "limit": 1
    },
    {
      "type": "availability",
      "name": "Disponibilité",
      "limit": 1
    },
    {
      "type": "add-to-cart",
      "name": "Bouton d'ajout au panier",
      "limit": 1
    },
    {
      "type": "@app"
    }
  ],
  "presets": [
    {
      "name": "Product Hero",
      "category": "Liquify",
      "blocks": [
        {
          "type": "product-name"
        },
        {
          "type": "product-price"
        },
        {
          "type": "availability"
        },
        {
          "type": "add-to-cart"
        }
      ]
    }
  ],
  "enabled_on": {
    "templates": [
      "product"
    ]
  }
}
{% endschema %}
