<style>
  .product-header_layout {
    display: grid;
    grid-template-columns: 1fr 1fr;
    grid-column-gap: 3rem;
    grid-row-gap: 2rem;
    align-items: start;
    min-height: 90vh;
    padding: 2rem 20px;
  }
  
  @media screen and (max-width: 768px) {
    .product-header_layout {
      grid-template-columns: 1fr;
      grid-column-gap: 0;
      min-height: auto;
      padding: 0 10px; /* Padding de 10px de chaque côté */
      /* S'assurer qu'il n'y a pas de comportement de scroll forcing */
      scroll-behavior: auto;
      align-items: start;
    }
  }
  
  /* Gallery Styles */
  .product-gallery-container {
    position: relative;
    width: 100%;
    height: calc(90vh - 4rem);
    display: flex;
    flex-direction: column;
  }
  
  @media screen and (max-width: 768px) {
    .product-gallery-container {
      height: auto;
      min-height: 300px;
    }
  }
  
  .product-gallery-main {
    position: relative;
    width: 100%;
    flex: 1;
    margin-bottom: 1rem;
    overflow: hidden;
    border-radius: 20px;
    background-color: transparent;
    display: flex;
  }
  
  .gallery-slide {
    width: auto;
    height: 100%;
    flex-shrink: 0;
    border-radius: 20px;
    overflow: hidden;
    background-color: transparent;
    position: relative;
    display: flex;
    justify-content: center;
    align-items: center;
  }
  
  @media screen and (max-width: 768px) {
    .gallery-slide {
      width: 100%;
      min-height: 300px;
    }
  }
  
  .gallery-image {
    width: auto;
    height: 100%;
    object-fit: contain;
    object-position: center;
  }
  
  .gallery-slides-container {
    display: flex;
    width: auto;
    height: 100%;
    transition: transform 0.3s ease;
  }
  
  @media screen and (max-width: 768px) {
    .gallery-slides-container {
      width: 100%;
      transition: transform 0.3s ease;
    }
  }
  
  .gallery-slide:not(:last-child) {
    margin-right: 1rem;
  }
  
  @media screen and (max-width: 768px) {
    .gallery-slide:not(:last-child) {
      margin-right: 0;
    }
  }
  
  /* Navigation Arrows */
  .gallery-navigation {
    position: absolute;
    bottom: 1rem;
    right: 1rem;
    display: flex;
    gap: 0.5rem;
    z-index: 10;
  }
  
  @media screen and (max-width: 768px) {
    .gallery-navigation {
      display: none; /* Masquer les flèches sur mobile */
    }
  }
  
  .nav-arrow {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 3rem;
    height: 3rem;
    background-color: rgba(245, 242, 217, 0.9);
    border: 1px solid #6e612b;
    border-radius: 50%;
    cursor: pointer;
    transition: all 0.3s ease;
    backdrop-filter: blur(5px);
  }
  
  .nav-arrow:hover {
    background-color: #6e612b;
    color: #f5f2d9;
  }
  
  .nav-arrow:disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }
  
  .nav-arrow svg {
    width: 1.2rem;
    height: 1.2rem;
    color: currentColor;
  }
  
  .nav-arrow.prev svg {
    transform: rotate(180deg);
  }
  
  /* Thumbnails */
  .product-thumbnails {
    display: flex;
    gap: 0.5rem;
    overflow-x: auto;
    padding: 0.5rem 0;
    scrollbar-width: none; /* Firefox */
    -ms-overflow-style: none; /* IE/Edge */
  }
  
  .product-thumbnails::-webkit-scrollbar {
    display: none; /* Chrome/Safari */
  }
  
  .thumbnail-item {
    flex-shrink: 0;
    width: auto;
    height: 3.7rem; /* Hauteur fixe de 3.7rem */
    border-radius: 10px;
    overflow: hidden;
    cursor: pointer;
    border: 2px solid transparent;
    transition: border-color 0.3s ease;
  }
  
  .thumbnail-item.active {
    border-color: #6e612b;
  }
  
  .thumbnail-image {
    width: auto;
    height: 100%;
    object-fit: cover;
    object-position: center;
  }
  
  /* Product Details */
  .product-header_product-details {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
    padding: 2rem 0;
    height: calc(90vh - 4rem);
    overflow-y: auto;
  }
  
  @media screen and (max-width: 768px) {
    .product-header_product-details {
      height: auto;
      padding: 1rem 0;
      width: 100%;
      box-sizing: border-box;
      /* Supprimer toute propriété qui pourrait forcer le repositionnement */
      position: static;
      overflow-y: visible;
    }
  }
  
  .product-title {
    font-family: Karla, sans-serif;
    color: #6e612b;
    font-size: 2rem;
    font-weight: 600;
    margin: 0;
    word-wrap: break-word;
    overflow-wrap: break-word;
  }
  
  @media screen and (max-width: 768px) {
    .product-title {
      font-size: 1.5rem;
    }
  }
  
  .product-price-wrapper {
    display: flex;
    align-items: center;
    gap: 1rem;
    flex-wrap: wrap;
  }
  
  .product-price {
    font-family: Karla, sans-serif;
    color: #6e612b;
    font-size: 1.5rem;
    font-weight: 600;
  }
  
  @media screen and (max-width: 768px) {
    .product-price {
      font-size: 1.3rem;
    }
  }
  
  .product-compare-price {
    font-family: Karla, sans-serif;
    color: #9e8c73;
    font-size: 1.2rem;
    text-decoration: line-through;
  }
  
  @media screen and (max-width: 768px) {
    .product-compare-price {
      font-size: 1rem;
    }
  }
  
  .product-item_tag {
    padding: 0.3rem 1rem;
    border-radius: 8px;
    background-color: #e74c3c;
    color: white;
    font-size: 0.85rem;
    font-weight: 500;
  }
  
  .stock-status {
    font-family: Karla, sans-serif;
    font-size: 0.9rem;
    padding: 0.5rem;
    text-align: center;
    border-radius: 5px;
  }
  
  .in-stock {
    background-color: #e8f5e8;
    color: #2d5a2d;
  }
  
  .out-of-stock {
    background-color: #ffe8e8;
    color: #8b0000;
  }
  
  .product-tags {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
  }
  
  .product-tags .product-item_tag {
    background-color: #9e8c73;
  }
  
  .product-description {
    font-family: Karla, sans-serif;
    color: #6e612b;
    line-height: 1.6;
    word-wrap: break-word;
    overflow-wrap: break-word;
  }
  
  /* Variant Selection */
  .variant-selector {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
    width: 100%;
  }
  
  .variant-label {
    font-family: Karla, sans-serif;
    color: #6e612b;
    font-weight: 600;
    font-size: 1rem;
  }
  
  .variant-select {
    padding: 0.75rem 1rem;
    border: 1px solid #6e612b;
    border-radius: 10px;
    background-color: white;
    font-family: Karla, sans-serif;
    color: #6e612b;
    font-size: 1rem;
    cursor: pointer;
    width: 100%;
    box-sizing: border-box;
  }
  
  /* Add to Cart */
  .add-to-cart-button {
    width: 100%;
    padding: 1rem;
    border: none;
    border-radius: 10px;
    background-color: #e67e22;
    font-family: Karla, sans-serif;
    color: #f5f2d9;
    font-weight: 600;
    font-size: 1.1rem;
    cursor: pointer;
    transition: all 0.3s ease;
    box-sizing: border-box;
  }
  
  .add-to-cart-button:hover {
    background-color: #d35400;
  }
  
  .add-to-cart-button:disabled {
    background-color: #ccc;
    cursor: not-allowed;
  }
  
  /* Shipping Info */
  .shipping-info {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 1rem 0;
    border-top: 1px solid rgba(0, 0, 0, 0.1);
    border-bottom: 1px solid rgba(0, 0, 0, 0.1);
    width: 100%;
    box-sizing: border-box;
  }
  
  .shipping-icon {
    width: 1.5rem;
    height: 1.5rem;
    color: #6e612b;
    flex-shrink: 0;
  }
  
  .shipping-text {
    font-family: Karla, sans-serif;
    color: #6e612b;
    font-size: 0.9rem;
  }

  /* Pictos Styles */
  .product-pictos-container {
    margin-top: 20px;
    display: flex;
    flex-wrap: wrap;
    gap: 1rem;
    width: 100%;
  }

  .picto-produit {
    display: flex;
    flex-direction: column;
    align-items: center;
    text-align: center;
    gap: 0.5rem;
    flex: 1;
    min-width: 80px;
  }

  .picto-produit .Div.Block.7 {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 50px;
    height: 50px;
  }

  .picto-produit .Image.3 {
    width: 100%;
    height: auto;
    max-width: 40px;
    max-height: 40px;
  }

  .picto-produit .texte-picto {
    font-family: Karla, sans-serif;
    color: #6e612b;
    font-size: 0.85rem;
    font-weight: 500;
    text-align: center;
  }

  @media screen and (max-width: 768px) {
    .product-pictos-container {
      justify-content: space-around;
    }
    
    .picto-produit {
      min-width: 70px;
    }
  }
</style>

<div class="product-header_component">
  <form action="/cart/add" method="post" enctype="multipart/form-data" id="product-form">
    <div class="product-header_layout">
      
      <!-- Gallery Section -->
      <div class="product-gallery-container">
        <div class="product-gallery-main" id="gallery-main">
          <div class="gallery-slides-container" id="slides-container">
            {% for media in product.media %}
              <div class="gallery-slide" data-slide="{{ forloop.index0 }}">
                {% if media.media_type == 'image' %}
                  <img src="{{ media | image_url: width: 1000 }}"
                       alt="{{ media.alt | escape }}"
                       class="gallery-image"
                       loading="{% if forloop.first %}eager{% else %}lazy{% endif %}">
                {% elsif media.media_type == 'video' %}
                  {{ media | video_tag: controls: true, class: "gallery-image" }}
                {% endif %}
              </div>
            {% endfor %}
          </div>
          
          <!-- Navigation Arrows -->
          {% if product.media.size > 1 %}
            <div class="gallery-navigation">
              <button type="button" class="nav-arrow prev" onclick="previousImage()" id="prev-btn">
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
                </svg>
              </button>
              <button type="button" class="nav-arrow next" onclick="nextImage()" id="next-btn">
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
                </svg>
              </button>
            </div>
          {% endif %}
        </div>
        
        <!-- Thumbnails -->
        {% if product.media.size > 1 %}
          <div class="product-thumbnails">
            {% for media in product.media %}
              <div class="thumbnail-item {% if forloop.first %}active{% endif %}" 
                   onclick="setCurrentImage({{ forloop.index0 }})"
                   data-thumbnail="{{ forloop.index0 }}">
                <img src="{{ media | image_url: width: 200 }}"
                     alt="{{ media.alt | escape }}"
                     class="thumbnail-image"
                     loading="lazy">
              </div>
            {% endfor %}
          </div>
        {% endif %}
      </div>
      
      <!-- Product Details Section -->
      <div class="product-header_product-details">
        
        <!-- Product Title -->
        <h1 class="product-title">{{ product.title }}</h1>
        
        <!-- Price -->
        <div class="product-price-wrapper">
          <span class="product-price" id="product-price">{{ product.selected_or_first_available_variant.price | money }}</span>
          {% if product.selected_or_first_available_variant.compare_at_price > product.selected_or_first_available_variant.price %}
            <span class="product-compare-price" id="product-compare-price">{{ product.selected_or_first_available_variant.compare_at_price | money }}</span>
            <span class="product-item_tag">Sale</span>
          {% endif %}
        </div>
        

        
        <!-- Product Description -->
        {% if product.description != blank %}
          <div class="product-description">{{ product.description }}</div>
        {% endif %}
        
        <!-- Variant Selection -->
        {% unless product.has_only_default_variant %}
          {% for option in product.options_with_values %}
            <div class="variant-selector">
              <label class="variant-label">{{ option.name }}</label>
              <select class="variant-select" 
                      name="options[{{ option.name | escape }}]" 
                      data-option-index="{{ forloop.index0 }}"
                      onchange="updateVariant()">
                {% for value in option.values %}
                  <option value="{{ value | escape }}" 
                          {% if option.selected_value == value %}selected="selected"{% endif %}>
                    {{ value }}
                  </option>
                {% endfor %}
              </select>
            </div>
          {% endfor %}
          <input type="hidden" name="id" id="product-variant-id" value="{{ product.selected_or_first_available_variant.id }}">
        {% else %}
          <input type="hidden" name="id" value="{{ product.selected_or_first_available_variant.id }}">
        {% endunless %}
        
        <!-- Shipping Info -->
        <div class="shipping-info">
          <svg class="shipping-icon" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4" />
          </svg>
          <span class="shipping-text">Livraison 1 - 3 jours</span>
        </div>
        
        <!-- Add to Cart Section -->
        <div class="add-to-cart-section">
          <button type="submit" class="add-to-cart-button" id="add-to-cart-btn"
                  {% unless product.selected_or_first_available_variant.available %}disabled{% endunless %}>
            {% if product.selected_or_first_available_variant.available %}
              Ajouter au panier
            {% else %}
              Rupture de stock
            {% endif %}
          </button>
        </div>

        <!-- Product Pictos Section -->
        <div class="product-pictos-container">
          {% for block in section.blocks %}
            {% if block.type == "picto-produit" %}
              <div class="picto-produit" {{ block.shopify_attributes }}>
                <div class="Div Block 7">
                  {% if block.settings.picto_image %}
                    <img class="Image 3" 
                         width="auto" 
                         height="auto" 
                         alt="{{ block.settings.picto_alt | default: block.settings.picto_text | escape }}" 
                         src="{{ block.settings.picto_image | image_url }}" 
                         loading="lazy">
                  {% else %}
                    <img class="Image 3" 
                         width="auto" 
                         height="auto" 
                         alt="inherit" 
                         src="https://cdn.prod.website-files.com/689370215f6dcea901024517/68946f4e84aec1da47fa5e95_SAV.svg" 
                         loading="lazy">
                  {% endif %}
                </div>
                <div class="texte-picto">
                  {{ block.settings.picto_text | default: "Souple" }}
                </div>
              </div>
            {% endif %}
          {% endfor %}
        </div>
        
      </div>
    </div>
  </form>
</div>

<script>
// Variables globales
let currentImageIndex = 0;
const totalImages = {{ product.media.size }};
const productVariants = {{ product.variants | json }};

// Variables pour le swipe mobile
let startX = 0;
let startY = 0;
let currentX = 0;
let currentY = 0;
let isDragging = false;
let isSwipeActive = false;

// Fonction pour déterminer si on est sur mobile
function isMobile() {
  return window.innerWidth <= 768;
}

// Navigation des images
function nextImage() {
  if (isMobile()) {
    // Loop infinie sur mobile
    currentImageIndex = (currentImageIndex + 1) % totalImages;
  } else {
    if (currentImageIndex < totalImages - 1) {
      currentImageIndex++;
    }
  }
  updateGalleryDisplay();
}

function previousImage() {
  if (isMobile()) {
    // Loop infinie sur mobile
    currentImageIndex = (currentImageIndex - 1 + totalImages) % totalImages;
  } else {
    if (currentImageIndex > 0) {
      currentImageIndex--;
    }
  }
  updateGalleryDisplay();
}

function setCurrentImage(index) {
  currentImageIndex = index;
  updateGalleryDisplay();
}

function updateGalleryDisplay() {
  const slidesContainer = document.getElementById('slides-container');
  const slides = document.querySelectorAll('.gallery-slide');
  
  if (slidesContainer && slides.length > 0) {
    if (isMobile()) {
      // Sur mobile, chaque slide fait 100% de largeur
      const offset = currentImageIndex * 100;
      slidesContainer.style.transform = `translateX(-${offset}%)`;
    } else {
      // Sur desktop, calcul normal
      let offset = 0;
      for (let i = 0; i < currentImageIndex; i++) {
        const slideWidth = slides[i].offsetWidth;
        const marginRight = 16; // 1rem = 16px
        offset += slideWidth + marginRight;
      }
      slidesContainer.style.transform = `translateX(-${offset}px)`;
    }
  }
  
  // Mettre à jour les thumbnails
  const thumbnails = document.querySelectorAll('.thumbnail-item');
  thumbnails.forEach((thumb, index) => {
    thumb.classList.toggle('active', index === currentImageIndex);
  });
  
  // Auto-scroll vers la thumbnail active seulement si nécessaire
  const activeThumbnail = document.querySelector('.thumbnail-item.active');
  if (activeThumbnail && !isMobile()) {
    // Seulement sur desktop pour éviter les interférences mobiles
    activeThumbnail.scrollIntoView({
      behavior: 'smooth',
      block: 'nearest',
      inline: 'center'
    });
  }
  
  // Mettre à jour les boutons (seulement sur desktop)
  if (!isMobile()) {
    const prevBtn = document.getElementById('prev-btn');
    const nextBtn = document.getElementById('next-btn');
    
    if (prevBtn) prevBtn.disabled = currentImageIndex === 0;
    if (nextBtn) nextBtn.disabled = currentImageIndex === totalImages - 1;
  }
}

// Gestion du swipe sur mobile
function initializeSwipe() {
  const galleryMain = document.getElementById('gallery-main');
  
  if (!galleryMain || !isMobile()) return;
  
  // Touch events avec passive: true pour ne pas bloquer le scroll
  galleryMain.addEventListener('touchstart', handleTouchStart, { passive: true });
  galleryMain.addEventListener('touchmove', handleTouchMove, { passive: true });
  galleryMain.addEventListener('touchend', handleTouchEnd, { passive: true });
}

function handleTouchStart(e) {
  startX = e.touches[0].clientX;
  startY = e.touches[0].clientY;
  isDragging = true;
  isSwipeActive = false;
  
  // Réinitialiser les positions pour éviter les conflits
  currentX = startX;
  currentY = startY;
}

function handleTouchMove(e) {
  if (!isDragging) return;
  
  currentX = e.touches[0].clientX;
  currentY = e.touches[0].clientY;
  const diffX = Math.abs(currentX - startX);
  const diffY = Math.abs(currentY - startY);
  
  // Seulement déclencher le swipe si c'est clairement un mouvement horizontal intentionnel
  if (diffX > 50 && diffX > diffY * 3) {
    isSwipeActive = true;
  } else if (diffY > 20) {
    // Si c'est un mouvement vertical, on arrête le dragging pour permettre le scroll
    isDragging = false;
    isSwipeActive = false;
  }
}

function handleTouchEnd(e) {
  if (!isDragging) {
    return;
  }
  
  // Seulement traiter le swipe si on a vraiment détecté un mouvement horizontal intentionnel
  if (isSwipeActive) {
    const diffX = currentX - startX;
    const threshold = 50;
    
    if (Math.abs(diffX) > threshold) {
      if (diffX > 0) {
        previousImage(); // Swipe vers la droite
      } else {
        nextImage(); // Swipe vers la gauche
      }
    }
  }
  
  isDragging = false;
  isSwipeActive = false;
}



// Mise à jour des variantes
function updateVariant() {
  const selects = document.querySelectorAll('.variant-select');
  const selectedOptions = Array.from(selects).map(select => select.value);
  
  // Trouver la variante correspondante
  const matchingVariant = productVariants.find(variant => {
    return selectedOptions.every((option, index) => {
      return variant[`option${index + 1}`] === option;
    });
  });
  
  if (matchingVariant) {
    // Mettre à jour l'ID de variante
    const variantIdInput = document.getElementById('product-variant-id');
    if (variantIdInput) {
      variantIdInput.value = matchingVariant.id;
    }
    
    // Mettre à jour le prix
    updatePrice(matchingVariant);
    
    // Mettre à jour le statut de stock
    updateStockStatus(matchingVariant);
    
    // Mettre à jour l'URL
    const newUrl = new URL(window.location);
    newUrl.searchParams.set('variant', matchingVariant.id);
    window.history.replaceState({}, '', newUrl);
  }
}

function updatePrice(variant) {
  const priceElement = document.getElementById('product-price');
  const comparePriceElement = document.getElementById('product-compare-price');
  
  // Fonction pour formater le prix (adaptation selon votre devise)
  function formatMoney(cents) {
    return new Intl.NumberFormat('fr-FR', {
      style: 'currency',
      currency: '{{ cart.currency.iso_code | default: "EUR" }}'
    }).format(cents / 100);
  }
  
  if (priceElement) {
    priceElement.textContent = formatMoney(variant.price);
  }
  
  if (comparePriceElement) {
    if (variant.compare_at_price && variant.compare_at_price > variant.price) {
      comparePriceElement.textContent = formatMoney(variant.compare_at_price);
      comparePriceElement.style.display = 'inline';
    } else {
      comparePriceElement.style.display = 'none';
    }
  }
}

function updateStockStatus(variant) {
  const addToCartBtn = document.getElementById('add-to-cart-btn');
  
  if (addToCartBtn) {
    if (variant.available) {
      addToCartBtn.disabled = false;
      addToCartBtn.textContent = 'Ajouter au panier';
    } else {
      addToCartBtn.disabled = true;
      addToCartBtn.textContent = 'Rupture de stock';
    }
  }
}

// Initialisation
document.addEventListener('DOMContentLoaded', function() {
  updateGalleryDisplay();
  initializeSwipe();
  
  // Debug : surveiller les scroll automatiques non désirés
  if (isMobile()) {
    let isUserScrolling = false;
    
    window.addEventListener('scroll', function() {
      if (!isUserScrolling) {
        console.log('Scroll automatique détecté');
      }
    }, { passive: true });
    
    // Marquer quand l'utilisateur scroll intentionnellement
    document.addEventListener('touchstart', function() {
      isUserScrolling = true;
      setTimeout(() => { isUserScrolling = false; }, 300);
    }, { passive: true });
  }
  
  // Re-calculer lors du redimensionnement de la fenêtre
  window.addEventListener('resize', function() {
    setTimeout(() => {
      updateGalleryDisplay();
      initializeSwipe();
    }, 100);
  });
});
</script>

{% schema %}
{
  "name": "Product Hero",
  "tag": "section",
  "class": "Section-produit-fiche",
  "settings": [
    {
      "type": "checkbox",
      "id": "show_shipping_info",
      "label": "Afficher les informations de livraison",
      "default": true
    },
    {
      "type": "text",
      "id": "shipping_text",
      "label": "Texte de livraison",
      "default": "Livraison 1 - 3 jours"
    }
  ],
  "blocks": [
    {
      "type": "picto-produit",
      "name": "Picto produit",
      "limit": 6,
      "settings": [
        {
          "type": "image_picker",
          "id": "picto_image",
          "label": "Image du picto"
        },
        {
          "type": "text",
          "id": "picto_text",
          "label": "Texte du picto",
          "default": "Souple"
        },
        {
          "type": "text",
          "id": "picto_alt",
          "label": "Texte alternatif de l'image"
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "Product Hero",
      "category": "Liquify"
    }
  ],
  "enabled_on": {
    "templates": ["product"]
  }
}
{% endschema %}
