<style>
  .product-header_layout {
    display: grid;
    grid-template-columns: 1fr 1fr;
    grid-column-gap: 3rem;
    grid-row-gap: 2rem;
    align-items: start;
    min-height: 90vh;
    padding: 2rem 20px;
  }
  
  @media screen and (max-width: 768px) {
    .product-header_layout {
      grid-template-columns: 1fr;
      grid-column-gap: 0;
      min-height: auto;
      padding: 0 10px; /* Padding de 10px de chaque côté */
      /* S'assurer qu'il n'y a pas de comportement de scroll forcing */
      scroll-behavior: auto;
      align-items: start;
    }
  }
  
  /* Gallery Styles */
  .product-gallery-container {
    position: relative;
    width: 100%;
    height: calc(90vh - 4rem);
    display: flex;
    flex-direction: column;
  }
  
  @media screen and (max-width: 768px) {
    .product-gallery-container {
      height: auto;
      min-height: 300px;
    }
  }
  
  .product-gallery-main {
    position: relative;
    width: 100%;
    flex: 1;
    margin-bottom: 1rem;
    overflow: hidden;
    border-radius: 20px;
    background-color: transparent;
    display: flex;
  }
  
  .gallery-slide {
    width: auto;
    height: 100%;
    flex-shrink: 0;
    border-radius: 20px;
    overflow: hidden;
    background-color: transparent;
    position: relative;
    display: flex;
    justify-content: center;
    align-items: center;
  }
  
  @media screen and (max-width: 768px) {
    .gallery-slide {
      width: 100%;
      min-height: 300px;
    }
  }
  
  .gallery-image {
    width: auto;
    height: 100%;
    object-fit: contain;
    object-position: center;
  }
  
  .gallery-slides-container {
    display: flex;
    width: auto;
    height: 100%;
    transition: transform 0.3s ease;
  }
  
  @media screen and (max-width: 768px) {
    .gallery-slides-container {
      width: 100%;
      transition: transform 0.3s ease;
    }
  }
  
  .gallery-slide:not(:last-child) {
    margin-right: 1rem;
  }
  
  @media screen and (max-width: 768px) {
    .gallery-slide:not(:last-child) {
      margin-right: 0;
    }
  }
  
  /* Navigation Arrows */
  .gallery-navigation {
    position: absolute;
    bottom: 1rem;
    right: 1rem;
    display: flex;
    gap: 0.5rem;
    z-index: 2;
  }
  
  @media screen and (max-width: 768px) {
    .gallery-navigation {
      display: none; /* Masquer les flèches sur mobile */
    }
  }
  
  .nav-arrow {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 3rem;
    height: 3rem;
    background-color: rgba(245, 242, 217, 0.9);
    border: 1px solid #6e612b;
    border-radius: 50%;
    cursor: pointer;
    transition: all 0.3s ease;
    backdrop-filter: blur(5px);
  }
  
  .nav-arrow:hover {
    background-color: #6e612b;
    color: #f5f2d9;
  }
  
  .nav-arrow:disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }
  
  .nav-arrow svg {
    width: 1.2rem;
    height: 1.2rem;
    color: currentColor;
  }
  
  .nav-arrow.prev svg {
    transform: rotate(180deg);
  }
  
  /* Thumbnails */
  .product-thumbnails {
    display: flex;
    gap: 0.5rem;
    overflow-x: auto;
    padding: 0.5rem 0;
    scrollbar-width: none; /* Firefox */
    -ms-overflow-style: none; /* IE/Edge */
  }
  
  .product-thumbnails::-webkit-scrollbar {
    display: none; /* Chrome/Safari */
  }
  
  .thumbnail-item {
    flex-shrink: 0;
    width: auto;
    height: 3.7rem; /* Hauteur fixe de 3.7rem */
    border-radius: 10px;
    overflow: hidden;
    cursor: pointer;
    border: 2px solid transparent;
    transition: border-color 0.3s ease;
  }
  
  .thumbnail-item.active {
    border-color: #6e612b;
  }
  
  .thumbnail-image {
    width: auto;
    height: 100%;
    object-fit: cover;
    object-position: center;
  }
  
  /* Product Details */
  .product-header_product-details {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
    padding: 2rem 0;
    height: auto;
    overflow-y: visible;
  }
  
  @media screen and (max-width: 768px) {
    .product-header_product-details {
      height: auto;
      padding: 1rem 0;
      width: 100%;
      box-sizing: border-box;
      position: static;
      overflow-y: visible;
    }
  }
  
  /* Titre du produit - Protection renforcée SEULEMENT pour la section product-hero */
  .product-header_component .product-header_product-details .product-title,
  .product-header_component .product-header_product-details h1.product-title,
  .product-header_component h1.product-title {
    font-family: Karla, sans-serif !important;
    color: #6e612b !important;
    font-size: 1.75rem !important; /* Taille H4 */
    font-weight: 600 !important;
    margin: 0 !important;
    padding: 0 !important;
    word-wrap: break-word !important;
    overflow-wrap: break-word !important;
    line-height: 1.2 !important;
    display: block !important;
    visibility: visible !important;
    opacity: 1 !important;
    position: relative !important;
    z-index: 1 !important;
    width: 100% !important;
    height: auto !important;
    min-height: auto !important;
    max-width: none !important;
    transform: none !important;
    left: auto !important;
    right: auto !important;
    top: auto !important;
    bottom: auto !important;
  }
  
  @media screen and (max-width: 768px) {
    .product-header_component .product-header_product-details .product-title,
    .product-header_component .product-header_product-details h1.product-title,
    .product-header_component h1.product-title {
      font-size: 1.5rem !important;
    }
  }
  
  .product-price-wrapper {
    display: flex;
    align-items: center;
    gap: 1rem;
    flex-wrap: wrap;
  }
  
  .product-price {
    font-family: Karla, sans-serif;
    color: #6e612b;
    font-size: 1.5rem;
    font-weight: 600;
  }
  
  @media screen and (max-width: 768px) {
    .product-price {
      font-size: 1.3rem;
    }
  }
  
  .product-compare-price {
    font-family: Karla, sans-serif;
    color: #9e8c73;
    font-size: 1.2rem;
    text-decoration: line-through;
  }
  
  @media screen and (max-width: 768px) {
    .product-compare-price {
      font-size: 1rem;
    }
  }
  
  .product-item_tag {
    padding: 0.3rem 1rem;
    border-radius: 8px;
    background-color: #e74c3c;
    color: white;
    font-size: 0.85rem;
    font-weight: 500;
  }
  
  .stock-status {
    font-family: Karla, sans-serif;
    font-size: 0.9rem;
    padding: 0.5rem;
    text-align: center;
    border-radius: 5px;
  }
  
  .in-stock {
    background-color: #e8f5e8;
    color: #2d5a2d;
  }
  
  .out-of-stock {
    background-color: #ffe8e8;
    color: #8b0000;
  }
  
  .product-tags {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
  }
  
  .product-tags .product-item_tag {
    background-color: #9e8c73;
  }
  
  .product-description {
    font-family: Karla, sans-serif;
    color: #6e612b;
    line-height: 1.6;
    word-wrap: break-word;
    overflow-wrap: break-word;
  }
  
  /* Variant Selection */
  .variant-selector {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
    width: 100%;
  }
  
  .variant-label {
    font-family: Karla, sans-serif;
    color: #6e612b;
    font-weight: 600;
    font-size: 1rem;
  }
  
  .variant-select {
    padding: 0.75rem 1rem;
    border: 1px solid #6e612b;
    border-radius: 10px;
    background-color: white;
    font-family: Karla, sans-serif;
    color: #6e612b;
    font-size: 1rem;
    cursor: pointer;
    width: 100%;
    box-sizing: border-box;
  }
  
  /* Add to Cart */
  .add-to-cart-button {
    width: 100%;
    padding: 1rem;
    border: none;
    border-radius: 10px;
    background-color: #e67e22;
    font-family: Karla, sans-serif;
    color: #f5f2d9;
    font-weight: 600;
    font-size: 1.1rem;
    cursor: pointer;
    transition: all 0.3s ease;
    box-sizing: border-box;
  }
  
  .add-to-cart-button:hover {
    background-color: #d35400;
  }
  
  .add-to-cart-button:disabled {
    background-color: #ccc;
    cursor: not-allowed;
  }
  
  /* Shipping Info */
  .shipping-info {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 1rem 0;
    border-top: 1px solid rgba(0, 0, 0, 0.1);
    border-bottom: 1px solid rgba(0, 0, 0, 0.1);
    width: 100%;
    box-sizing: border-box;
  }
  
  .shipping-icon {
    width: 1.5rem;
    height: 1.5rem;
    color: #6e612b;
    flex-shrink: 0;
  }
  
  .shipping-text {
    font-family: Karla, sans-serif;
    color: #6e612b;
    font-size: 0.9rem;
  }

  /* Pictos Styles */
  .product-pictos-container {
    margin-top: 20px;
    display: flex;
    flex-wrap: wrap;
    gap: 1rem;
    width: 70%;
    max-width: 70%;
  }

  /* DESKTOP uniquement : Forcer le flexbox au lieu de la grille */
  @media screen and (min-width: 769px) {
    .product-pictos-container {
      display: flex !important;
      flex-wrap: wrap !important;
      gap: 1rem !important;
      align-items: flex-start !important;
      justify-content: flex-start !important;
    }

    /* Conteneur de l'image : hauteur fixe 40px */
    .product-header_component .product-pictos-container .picto-produit .Div.Block.7,
    .product-header_component .picto-produit .Div.Block.7,
    .product-pictos-container .picto-produit .Div.Block.7,
    .picto-produit .Div.Block.7 {
      width: 100% !important;
      height: 40px !important;
      max-height: 40px !important;
      min-height: 40px !important;
      flex: 0 0 40px !important;
      display: flex !important;
      align-items: center !important;
      justify-content: center !important;
      overflow: hidden !important;
      box-sizing: border-box !important;
    }

    /* Image : 100% du conteneur avec max-height 100% */
    .product-header_component .product-pictos-container .picto-produit .Div.Block.7 .Image.3,
    .product-header_component .product-pictos-container .picto-produit .Image.3,
    .product-header_component .picto-produit .Div.Block.7 img,
    .product-header_component .picto-produit img,
    .product-pictos-container .picto-produit .Div.Block.7 .Image.3,
    .product-pictos-container .picto-produit .Image.3,
    .picto-produit .Div.Block.7 img,
    .picto-produit img,
    .picto-produit .Image.3 {
      width: auto !important;
      height: 100% !important;
      max-width: 100% !important;
      max-height: 100% !important;
      min-width: auto !important;
      min-height: auto !important;
      object-fit: contain !important;
      object-position: center !important;
      display: block !important;
      box-sizing: border-box !important;
    }

    .product-header_component .picto-produit,
    .product-pictos-container .picto-produit,
    .picto-produit {
      height: 65px !important;
      max-height: 65px !important;
      min-height: 65px !important;
    }
  }

  /* MOBILE et TABLET : Garder la grille */
  @media screen and (max-width: 768px) {
    .product-pictos-container {
      display: grid !important;
      grid-template-columns: repeat(auto-fit, minmax(80px, 1fr)) !important;
      gap: 1rem !important;
      justify-items: center !important;
      width: 100% !important;
      max-width: 100% !important;
    }
  }

  .picto-produit {
    display: flex;
    flex-direction: column;
    align-items: center;
    text-align: center;
    gap: 0.5rem;
    flex: 1;
    min-width: 80px;
    height: 60px;
    max-height: 60px;
  }

  .picto-produit .Div.Block.7 {
    display: flex;
    align-items: center;
    justify-content: center;
    width: auto;
    height: 25px;
    max-height: 25px;
    flex: 0 0 25px;
    overflow: hidden;
  }

  .picto-produit .Image.3 {
    width: auto !important;
    height: 25px !important;
    max-width: 40px !important;
    max-height: 25px !important;
    object-fit: contain;
    object-position: center;
  }

  /* Règles spécifiques pour DESKTOP uniquement - Version renforcée */
  @media screen and (min-width: 769px) {
    .product-header_component .product-pictos-container .picto-produit .Div.Block.7,
    .product-header_component .picto-produit .Div.Block.7,
    .product-pictos-container .picto-produit .Div.Block.7,
    .picto-produit .Div.Block.7 {
      width: 100% !important;
      height: 25px !important;
      max-height: 25px !important;
      min-height: 25px !important;
      flex: 0 0 25px !important;
      display: flex !important;
      align-items: center !important;
      justify-content: center !important;
      overflow: hidden !important;
      box-sizing: border-box !important;
    }

    .product-header_component .product-pictos-container .picto-produit .Div.Block.7 .Image.3,
    .product-header_component .product-pictos-container .picto-produit .Image.3,
    .product-header_component .picto-produit .Div.Block.7 img,
    .product-header_component .picto-produit img,
    .product-pictos-container .picto-produit .Div.Block.7 .Image.3,
    .product-pictos-container .picto-produit .Image.3,
    .picto-produit .Div.Block.7 img,
    .picto-produit img,
    .picto-produit .Image.3 {
      width: auto !important;
      height: 25px !important;
      max-width: 40px !important;
      max-height: 25px !important;
      min-width: auto !important;
      min-height: auto !important;
      object-fit: contain !important;
      object-position: center !important;
      display: block !important;
      box-sizing: border-box !important;
    }

    .product-header_component .picto-produit,
    .product-pictos-container .picto-produit,
    .picto-produit {
      height: 45px !important;
      max-height: 45px !important;
      min-height: 45px !important;
    }
  }

  .picto-produit .texte-picto {
    font-family: Karla, sans-serif;
    color: #6e612b;
    font-size: 0.75rem;
    font-weight: 500;
    text-align: center;
    line-height: 1;
    margin-top: auto;
  }

  /* Guide des tailles */
  .size-guide-button {
    font-family: Karla, sans-serif;
    font-size: 1rem;
    font-weight: 400;
    color: #6e612b;
    background: transparent;
    border: none;
    text-decoration: underline;
    cursor: pointer;
    padding: 0;
    text-align: right;
    white-space: nowrap;
    flex-shrink: 0;
  }

  .size-guide-button:hover {
    color: #5a4f23;
  }

  /* Popup Guide des tailles */
  .size-guide-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5);
    z-index: 1000;
    display: none;
    align-items: center;
    justify-content: center;
    padding: 20px;
    box-sizing: border-box;
  }

  .size-guide-popup {
    background: white;
    border-radius: 15px;
    max-width: 800px;
    width: 100%;
    max-height: 90vh;
    position: relative;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
    overflow: hidden;
  }

  .size-guide-close {
    background: none;
    border: none;
    font-size: 1.5rem;
    cursor: pointer;
    color: #6e612b;
    width: 30px;
    height: 30px;
    display: flex;
    align-items: center;
    justify-content: center;
    position: absolute;
    top: 15px;
    right: 15px;
    z-index: 1001;
  }

  .size-guide-content {
    padding: 2rem;
    max-height: calc(90vh - 60px);
    overflow-y: auto;
    font-family: Karla, sans-serif;
    line-height: 1.6;
    color: #333;
  }

  @media screen and (max-width: 768px) {
    .size-guide-popup {
      max-width: 95%;
      max-height: 85vh;
    }

    .size-guide-content {
      padding: 20px 10px;
      max-height: calc(85vh - 60px);
    }
  }

  @media screen and (max-width: 768px) {
    .product-pictos-container {
      display: grid !important;
      grid-template-columns: repeat(auto-fit, minmax(80px, 1fr)) !important;
      gap: 1rem !important;
      justify-items: center !important;
      width: 100% !important;
      max-width: 100% !important;
    }
    
    .picto-produit {
      min-width: 70px;
      height: 60px;
      max-height: 60px;
      display: flex !important;
      flex-direction: column !important;
      align-items: center !important;
      justify-content: space-between !important;
    }

    .picto-produit .Div.Block.7 {
      width: 100% !important;
      height: 40px !important;
      max-height: 40px !important;
      flex: 0 0 40px !important;
      display: flex !important;
      align-items: center !important;
      justify-content: center !important;
      overflow: hidden !important;
    }

    .product-pictos-container .picto-produit .Div.Block.7 .Image.3,
    .product-pictos-container .picto-produit .Image.3,
    .picto-produit .Div.Block.7 img,
    .picto-produit img {
      width: auto !important;
      height: 30px !important;
      max-width: 40px !important;
      max-height: 30px !important;
      min-width: auto !important;
      min-height: auto !important;
      object-fit: contain !important;
      object-position: center !important;
    }

    .picto-produit .texte-picto {
      font-size: 0.75rem !important;
      line-height: 1 !important;
      margin-top: 0.25rem !important;
      flex: 0 0 auto !important;
    }
  }
</style>

<div class="product-header_component">
  <form action="/cart/add" method="post" enctype="multipart/form-data" id="product-form">
    <div class="product-header_layout">
      
      <!-- Gallery Section -->
      <div class="product-gallery-container">
        <div class="product-gallery-main" id="gallery-main">
          <div class="gallery-slides-container" id="slides-container">
            {% for media in product.media %}
              <div class="gallery-slide" data-slide="{{ forloop.index0 }}">
                {% if media.media_type == 'image' %}
                  <img src="{{ media | image_url: width: 1000 }}"
                       alt="{{ media.alt | escape }}"
                       class="gallery-image"
                       loading="{% if forloop.first %}eager{% else %}lazy{% endif %}">
                {% elsif media.media_type == 'video' %}
                  {{ media | video_tag: controls: true, class: "gallery-image" }}
                {% endif %}
              </div>
            {% endfor %}
          </div>
          
          <!-- Navigation Arrows -->
          {% if product.media.size > 1 %}
            <div class="gallery-navigation">
              <button type="button" class="nav-arrow prev" onclick="previousImage()" id="prev-btn">
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
                </svg>
              </button>
              <button type="button" class="nav-arrow next" onclick="nextImage()" id="next-btn">
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
                </svg>
              </button>
            </div>
          {% endif %}
        </div>
        
        <!-- Thumbnails -->
        {% if product.media.size > 1 %}
          <div class="product-thumbnails">
            {% for media in product.media %}
              <div class="thumbnail-item {% if forloop.first %}active{% endif %}" 
                   onclick="setCurrentImage({{ forloop.index0 }})"
                   data-thumbnail="{{ forloop.index0 }}">
                <img src="{{ media | image_url: width: 200 }}"
                     alt="{{ media.alt | escape }}"
                     class="thumbnail-image"
                     loading="lazy">
              </div>
            {% endfor %}
          </div>
        {% endif %}
      </div>
      
      <!-- Product Details Section -->
      <div class="product-header_product-details">
        
        <!-- Product Title -->
        <h1 class="product-title product-main-title">{{ product.title }}</h1>
        
        <!-- Price -->
        <div class="product-price-wrapper">
          <span class="product-price" id="product-price">{{ product.selected_or_first_available_variant.price | money }}</span>
          {% if product.selected_or_first_available_variant.compare_at_price > product.selected_or_first_available_variant.price %}
            <span class="product-compare-price" id="product-compare-price">{{ product.selected_or_first_available_variant.compare_at_price | money }}</span>
            <span class="product-item_tag">Sale</span>
          {% endif %}
        </div>
        

        
        <!-- Product Description -->
        {% if product.description != blank %}
          <div class="product-description">{{ product.description }}</div>
        {% endif %}
        
        <!-- Variant Selection -->
        {% unless product.has_only_default_variant %}
          {% for option in product.options_with_values %}
            <div class="variant-selector">
              {% if option.name contains 'aille' or option.name contains 'Taille' or option.name contains 'Pointure' %}
                <div class="variant-label-row">
                  <label class="variant-label">{{ option.name }}</label>
                  <button type="button" class="size-guide-button" onclick="openSizeGuide()">
                    Guide des tailles
                  </button>
                </div>
              {% else %}
                <label class="variant-label">{{ option.name }}</label>
              {% endif %}
              <select class="variant-select" 
                      name="options[{{ option.name | escape }}]" 
                      data-option-index="{{ forloop.index0 }}"
                      onchange="updateVariant()">
                {% for value in option.values %}
                  <option value="{{ value | escape }}" 
                          {% if option.selected_value == value %}selected="selected"{% endif %}>
                    {{ value }}
                  </option>
                {% endfor %}
              </select>
            </div>
          {% endfor %}
          <input type="hidden" name="id" id="product-variant-id" value="{{ product.selected_or_first_available_variant.id }}">
        {% else %}
          <input type="hidden" name="id" value="{{ product.selected_or_first_available_variant.id }}">
        {% endunless %}
        
        <!-- Shipping Info avec délai dynamique -->
        <div class="shipping-info">
          <svg class="shipping-icon" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4" />
          </svg>
          <span class="shipping-text" id="dynamic-shipping-text">
            {% comment %} Récupération dynamique des zones de livraison Shopify {% endcomment %}
            {% assign customer_country = '' %}
            {% if customer.default_address.country_code %}
              {% assign customer_country = customer.default_address.country_code %}
            {% elsif localization.country.iso_code %}
              {% assign customer_country = localization.country.iso_code %}
            {% else %}
              {% assign customer_country = 'FR' %}
            {% endif %}

            {% assign shipping_text = 'Livraison : nous contacter' %}
            {% assign shipping_found = false %}

            {% comment %} Parcourir les zones de livraison configurées dans Shopify {% endcomment %}
            {% for shipping_zone in shop.shipping_zones %}
              {% unless shipping_found %}
                {% for country in shipping_zone.countries %}
                  {% if country.iso_code == customer_country %}
                    {% for rate in shipping_zone.shipping_methods %}
                      {% if rate.delivery_time != blank %}
                        {% assign shipping_text = rate.delivery_time %}
                        {% assign shipping_found = true %}
                        {% break %}
                      {% elsif rate.price == 0 %}
                        {% assign shipping_text = 'Livraison gratuite' %}
                        {% assign shipping_found = true %}
                        {% break %}
                      {% endif %}
                    {% endfor %}
                    {% break %}
                  {% endif %}
                {% endfor %}
              {% endunless %}
            {% endfor %}

            {% comment %} Fallback si aucune zone trouvée - utiliser les données des paramètres de livraison {% endcomment %}
            {% unless shipping_found %}
              {% case customer_country %}
                {% when 'FR' %}
                  {% assign shipping_text = '2-4 jours ouvrables' %}
                {% when 'BE', 'LU', 'CH', 'NL', 'DE', 'AT' %}
                  {% assign shipping_text = '3-6 jours ouvrables' %}
                {% when 'ES', 'IT', 'PT' %}
                  {% assign shipping_text = '4-8 jours ouvrables' %}
                {% when 'GB', 'IE' %}
                  {% assign shipping_text = '5-10 jours ouvrables' %}
                {% else %}
                  {% assign shipping_text = 'Livraison internationale : nous contacter' %}
              {% endcase %}
            {% endunless %}

            Livraison {{ shipping_text }}
          </span>
        </div>
        
        <!-- Add to Cart Section -->
        <div class="add-to-cart-section">
          <button type="submit" class="add-to-cart-button" id="add-to-cart-btn"
                  {% unless product.selected_or_first_available_variant.available %}disabled{% endunless %}>
            {% if product.selected_or_first_available_variant.available %}
              Ajouter au panier
            {% else %}
              Rupture de stock
            {% endif %}
          </button>
        </div>

        <!-- Product Pictos Section -->
        <div class="product-pictos-container">
          {% for block in section.blocks %}
            {% if block.type == "picto-produit" %}
              <div class="picto-produit" {{ block.shopify_attributes }}>
                <div class="Div Block 7">
                  {% if block.settings.picto_image %}
                    <img class="Image 3" 
                         width="auto" 
                         height="auto" 
                         alt="{{ block.settings.picto_alt | default: block.settings.picto_text | escape }}" 
                         src="{{ block.settings.picto_image | image_url }}" 
                         loading="lazy">
                  {% else %}
                    <img class="Image 3" 
                         width="auto" 
                         height="auto" 
                         alt="inherit" 
                         src="https://cdn.prod.website-files.com/689370215f6dcea901024517/68946f4e84aec1da47fa5e95_SAV.svg" 
                         loading="lazy">
                  {% endif %}
                </div>
                <div class="texte-picto">
                  {{ block.settings.picto_text | default: "Souple" }}
                </div>
              </div>
            {% endif %}
          {% endfor %}
        </div>
        
      </div>
    </div>
  </form>

  <!-- Popup Guide des tailles -->
  <div class="size-guide-overlay" id="sizeGuideOverlay" onclick="closeSizeGuide(event)">
    <div class="size-guide-popup" onclick="event.stopPropagation()">
      <button class="size-guide-close" onclick="closeSizeGuide()">&times;</button>
      <div class="size-guide-content" id="sizeGuideContent">
        <p>Chargement...</p>
      </div>
    </div>
  </div>
</div>

<script>
// Variables globales
let currentImageIndex = 0;
const totalImages = {{ product.media.size }};
const productVariants = {{ product.variants | json }};

// Variables pour le swipe mobile
let startX = 0;
let startY = 0;
let currentX = 0;
let currentY = 0;
let isDragging = false;
let isSwipeActive = false;

// Fonction pour déterminer si on est sur mobile
function isMobile() {
  return window.innerWidth <= 768;
}

// Navigation des images - MODIFICATION : Boucle infinie sur desktop
function nextImage() {
  if (isMobile()) {
    // Loop infinie sur mobile
    currentImageIndex = (currentImageIndex + 1) % totalImages;
  } else {
    // NOUVELLE LOGIQUE DESKTOP : Loop infinie aussi
    currentImageIndex = (currentImageIndex + 1) % totalImages;
  }
  updateGalleryDisplay();
}

function previousImage() {
  if (isMobile()) {
    // Loop infinie sur mobile
    currentImageIndex = (currentImageIndex - 1 + totalImages) % totalImages;
  } else {
    // NOUVELLE LOGIQUE DESKTOP : Loop infinie aussi
    currentImageIndex = (currentImageIndex - 1 + totalImages) % totalImages;
  }
  updateGalleryDisplay();
}

function setCurrentImage(index) {
  currentImageIndex = index;
  updateGalleryDisplay();
}

function updateGalleryDisplay() {
  const slidesContainer = document.getElementById('slides-container');
  const slides = document.querySelectorAll('.gallery-slide');
  
  if (slidesContainer && slides.length > 0) {
    if (isMobile()) {
      // Sur mobile, chaque slide fait 100% de largeur
      const offset = currentImageIndex * 100;
      slidesContainer.style.transform = `translateX(-${offset}%)`;
    } else {
      // Sur desktop, calcul normal
      let offset = 0;
      for (let i = 0; i < currentImageIndex; i++) {
        const slideWidth = slides[i].offsetWidth;
        const marginRight = 16; // 1rem = 16px
        offset += slideWidth + marginRight;
      }
      slidesContainer.style.transform = `translateX(-${offset}px)`;
    }
  }
  
  // Mettre à jour les thumbnails
  const thumbnails = document.querySelectorAll('.thumbnail-item');
  thumbnails.forEach((thumb, index) => {
    thumb.classList.toggle('active', index === currentImageIndex);
  });
  
  // Auto-scroll vers la thumbnail active seulement si nécessaire
  const activeThumbnail = document.querySelector('.thumbnail-item.active');
  if (activeThumbnail && !isMobile()) {
    // Seulement sur desktop pour éviter les interférences mobiles
    activeThumbnail.scrollIntoView({
      behavior: 'smooth',
      block: 'nearest',
      inline: 'center'
    });
  }
  
  // SUPPRESSION : Plus de désactivation des boutons sur desktop
  // Les boutons restent toujours actifs grâce à la boucle infinie
}

// Gestion du swipe sur mobile
function initializeSwipe() {
  const galleryMain = document.getElementById('gallery-main');
  
  if (!galleryMain || !isMobile()) return;
  
  // Touch events avec passive: true pour ne pas bloquer le scroll
  galleryMain.addEventListener('touchstart', handleTouchStart, { passive: true });
  galleryMain.addEventListener('touchmove', handleTouchMove, { passive: true });
  galleryMain.addEventListener('touchend', handleTouchEnd, { passive: true });
}

function handleTouchStart(e) {
  startX = e.touches[0].clientX;
  startY = e.touches[0].clientY;
  isDragging = true;
  isSwipeActive = false;
  
  // Réinitialiser les positions pour éviter les conflits
  currentX = startX;
  currentY = startY;
}

function handleTouchMove(e) {
  if (!isDragging) return;
  
  currentX = e.touches[0].clientX;
  currentY = e.touches[0].clientY;
  const diffX = Math.abs(currentX - startX);
  const diffY = Math.abs(currentY - startY);
  
  // Seulement déclencher le swipe si c'est clairement un mouvement horizontal intentionnel
  if (diffX > 50 && diffX > diffY * 3) {
    isSwipeActive = true;
  } else if (diffY > 20) {
    // Si c'est un mouvement vertical, on arrête le dragging pour permettre le scroll
    isDragging = false;
    isSwipeActive = false;
  }
}

function handleTouchEnd(e) {
  if (!isDragging) {
    return;
  }
  
  // Seulement traiter le swipe si on a vraiment détecté un mouvement horizontal intentionnel
  if (isSwipeActive) {
    const diffX = currentX - startX;
    const threshold = 50;
    
    if (Math.abs(diffX) > threshold) {
      if (diffX > 0) {
        previousImage(); // Swipe vers la droite
      } else {
        nextImage(); // Swipe vers la gauche
      }
    }
  }
  
  isDragging = false;
  isSwipeActive = false;
}



// Mise à jour des variantes
function updateVariant() {
  const selects = document.querySelectorAll('.variant-select');
  const selectedOptions = Array.from(selects).map(select => select.value);
  
  // Trouver la variante correspondante
  const matchingVariant = productVariants.find(variant => {
    return selectedOptions.every((option, index) => {
      return variant[`option${index + 1}`] === option;
    });
  });
  
  if (matchingVariant) {
    // Mettre à jour l'ID de variante
    const variantIdInput = document.getElementById('product-variant-id');
    if (variantIdInput) {
      variantIdInput.value = matchingVariant.id;
    }
    
    // Mettre à jour le prix
    updatePrice(matchingVariant);
    
    // Mettre à jour le statut de stock
    updateStockStatus(matchingVariant);
    
    // Mettre à jour l'URL
    const newUrl = new URL(window.location);
    newUrl.searchParams.set('variant', matchingVariant.id);
    window.history.replaceState({}, '', newUrl);
  }
}

function updatePrice(variant) {
  const priceElement = document.getElementById('product-price');
  const comparePriceElement = document.getElementById('product-compare-price');
  
  // Fonction pour formater le prix (adaptation selon votre devise)
  function formatMoney(cents) {
    return new Intl.NumberFormat('fr-FR', {
      style: 'currency',
      currency: '{{ cart.currency.iso_code | default: "EUR" }}'
    }).format(cents / 100);
  }
  
  if (priceElement) {
    priceElement.textContent = formatMoney(variant.price);
  }
  
  if (comparePriceElement) {
    if (variant.compare_at_price && variant.compare_at_price > variant.price) {
      comparePriceElement.textContent = formatMoney(variant.compare_at_price);
      comparePriceElement.style.display = 'inline';
    } else {
      comparePriceElement.style.display = 'none';
    }
  }
}

function updateStockStatus(variant) {
  const addToCartBtn = document.getElementById('add-to-cart-btn');
  
  if (addToCartBtn) {
    if (variant.available) {
      addToCartBtn.disabled = false;
      addToCartBtn.textContent = 'Ajouter au panier';
    } else {
      addToCartBtn.disabled = true;
      addToCartBtn.textContent = 'Rupture de stock';
    }
  }
}

// Fonctions pour le guide des tailles
function openSizeGuide() {
  const overlay = document.getElementById('sizeGuideOverlay');
  const content = document.getElementById('sizeGuideContent');
  
  // Afficher le popup
  overlay.style.display = 'flex';
  document.body.style.overflow = 'hidden';
  
  // Charger le contenu de la page guide-des-tailles
  fetch('/pages/guide-des-tailles')
    .then(response => response.text())
    .then(data => {
      // Extraire le contenu principal de la page
      const parser = new DOMParser();
      const doc = parser.parseFromString(data, 'text/html');
      const pageContent = doc.querySelector('.page-content, .rte, main, .content, .page') || doc.querySelector('body');
      
      if (pageContent) {
        content.innerHTML = pageContent.innerHTML;
      } else {
        content.innerHTML = '<p>Impossible de charger le guide des tailles.</p>';
      }
    })
    .catch(error => {
      console.error('Erreur lors du chargement du guide des tailles:', error);
      content.innerHTML = '<p>Erreur lors du chargement du guide des tailles.</p>';
    });
}

function closeSizeGuide(event) {
  if (!event || event.target === document.getElementById('sizeGuideOverlay') || event.target.classList.contains('size-guide-close')) {
    const overlay = document.getElementById('sizeGuideOverlay');
    overlay.style.display = 'none';
    document.body.style.overflow = '';
  }
}

// Fonction pour détecter la localisation et récupérer les vrais délais Shopify
function updateShippingBasedOnLocation() {
  // Si la géolocalisation est supportée
  if ("geolocation" in navigator) {
    navigator.geolocation.getCurrentPosition(function(position) {
      const lat = position.coords.latitude;
      const lon = position.coords.longitude;
      
      // Utiliser une API de géocodage inversé pour obtenir le pays
      fetch(`https://api.bigdatacloud.net/data/reverse-geocode-client?latitude=${lat}&longitude=${lon}&localityLanguage=fr`)
        .then(response => response.json())
        .then(data => {
          const countryCode = data.countryCode;
          fetchShippingRatesFromShopify(countryCode);
        })
        .catch(error => {
          console.log('Erreur géolocalisation:', error);
          // Fallback sur la détection IP
          detectCountryByIP();
        });
    }, function(error) {
      // Si l'utilisateur refuse la géolocalisation, utiliser la détection IP
      detectCountryByIP();
    });
  } else {
    // Fallback sur la détection IP si géolocalisation non supportée
    detectCountryByIP();
  }
}

// Fonction de fallback pour détecter le pays via l'IP
function detectCountryByIP() {
  fetch('https://ipapi.co/json/')
    .then(response => response.json())
    .then(data => {
      const countryCode = data.country_code;
      fetchShippingRatesFromShopify(countryCode);
    })
    .catch(error => {
      console.log('Erreur détection IP:', error);
      // Garder le texte par défaut défini par Shopify
    });
}

// Fonction pour récupérer les vraies données de livraison depuis Shopify
function fetchShippingRatesFromShopify(countryCode) {
  // Construire l'URL pour récupérer les tarifs de livraison
  const cartData = {
    items: [{
      id: {{ product.selected_or_first_available_variant.id }},
      quantity: 1
    }],
    attributes: {},
    original_total_price: {{ product.selected_or_first_available_variant.price }},
    total_price: {{ product.selected_or_first_available_variant.price }},
    total_weight: {{ product.selected_or_first_available_variant.weight }},
    currency: '{{ cart.currency.iso_code }}',
    items_count: 1,
    items_subtotal_price: {{ product.selected_or_first_available_variant.price }}
  };

  // Utiliser l'API Shopify pour récupérer les tarifs de livraison
  fetch(`/cart/shipping_rates.json?shipping_address[country]=${countryCode}`, {
    method: 'GET',
    headers: {
      'Content-Type': 'application/json',
    }
  })
  .then(response => response.json())
  .then(data => {
    if (data.shipping_rates && data.shipping_rates.length > 0) {
      // Prendre le premier tarif disponible (ou le gratuit si disponible)
      let selectedRate = data.shipping_rates[0];
      
      // Chercher un tarif gratuit en priorité
      const freeRate = data.shipping_rates.find(rate => rate.price === "0.00");
      if (freeRate) {
        selectedRate = freeRate;
      }
      
      // Construire le texte de livraison
      let shippingText = 'Livraison';
      if (selectedRate.delivery_range && selectedRate.delivery_range.length > 0) {
        const range = selectedRate.delivery_range[0];
        shippingText += ` ${range.min}-${range.max} jours ouvrables`;
      } else if (selectedRate.title) {
        shippingText += ` ${selectedRate.title}`;
      }
      
      if (selectedRate.price === "0.00") {
        shippingText += ' (gratuite)';
      }
      
      updateShippingTextDirect(shippingText);
    } else {
      // Fallback sur les délais statiques
      updateShippingTextStatic(countryCode);
    }
  })
  .catch(error => {
    console.log('Erreur API Shopify:', error);
    // Fallback sur les délais statiques
    updateShippingTextStatic(countryCode);
  });
}

// Fonction pour mettre à jour avec les délais statiques (fallback)
function updateShippingTextStatic(countryCode) {
  let shippingText = '';
  
  switch(countryCode) {
    case 'FR':
      shippingText = 'Livraison 2-4 jours ouvrables';
      break;
    case 'BE':
    case 'LU':
    case 'CH':
    case 'NL':
    case 'DE':
    case 'AT':
      shippingText = 'Livraison 3-6 jours ouvrables';
      break;
    case 'ES':
    case 'IT':
    case 'PT':
      shippingText = 'Livraison 4-8 jours ouvrables';
      break;
    case 'GB':
    case 'IE':
      shippingText = 'Livraison 5-10 jours ouvrables';
      break;
    case 'PL':
    case 'CZ':
    case 'SK':
    case 'HU':
    case 'SI':
    case 'HR':
      shippingText = 'Livraison 6-12 jours ouvrables';
      break;
    case 'SE':
    case 'NO':
    case 'DK':
    case 'FI':
      shippingText = 'Livraison 6-14 jours ouvrables';
      break;
    case 'US':
    case 'CA':
      shippingText = 'Livraison 8-18 jours ouvrables';
      break;
    case 'AU':
    case 'NZ':
      shippingText = 'Livraison 12-24 jours ouvrables';
      break;
    case 'JP':
    case 'KR':
    case 'SG':
    case 'HK':
      shippingText = 'Livraison 10-20 jours ouvrables';
      break;
    case 'BR':
    case 'AR':
    case 'MX':
      shippingText = 'Livraison 15-30 jours ouvrables';
      break;
    default:
      shippingText = 'Livraison internationale : nous contacter';
  }
  
  updateShippingTextDirect(shippingText);
}

// Fonction pour mettre à jour directement le texte de livraison
function updateShippingTextDirect(shippingText) {
  const shippingElement = document.getElementById('dynamic-shipping-text');
  if (!shippingElement) return;
  
  // Marquer l'élément comme ayant été modifié dynamiquement
  shippingElement.setAttribute('data-dynamic-updated', 'true');
  shippingElement.textContent = shippingText;
}

// Initialisation
document.addEventListener('DOMContentLoaded', function() {
  updateGalleryDisplay();
  initializeSwipe();
  
  // Initialiser la détection de localisation pour les délais de livraison
  setTimeout(updateShippingBasedOnLocation, 1000);
  
  // Protection renforcée pour le titre du produit - SEULEMENT dans notre section
  const protectTitle = () => {
    const titles = document.querySelectorAll('.product-header_component .product-title, .product-header_component .product-main-title, .product-header_component h1.product-title');
    titles.forEach(title => {
      if (title) {
        const styles = {
          'display': 'block',
          'visibility': 'visible',
          'opacity': '1',
          'position': 'relative',
          'z-index': '1',
          'font-size': window.innerWidth <= 768 ? '1.5rem' : '1.75rem',
          'font-family': 'Karla, sans-serif',
          'color': '#6e612b',
          'font-weight': '600',
          'line-height': '1.2',
          'margin': '0',
          'padding': '0'
        };
        
        Object.keys(styles).forEach(property => {
          title.style.setProperty(property, styles[property], 'important');
        });
      }
    });
  };

  // Fonction pour ajuster les images des pictos sur mobile
  const adjustPictosOnMobile = () => {
    if (window.innerWidth <= 768) {
      // Sélectionner toutes les images dans les pictos
      const pictoImages = document.querySelectorAll('.product-pictos-container img, .picto-produit img');
      
      pictoImages.forEach(img => {
        img.style.setProperty('width', 'auto', 'important');
        img.style.setProperty('height', '30px', 'important');
        img.style.setProperty('max-width', '40px', 'important');
        img.style.setProperty('max-height', '30px', 'important');
        img.style.setProperty('object-fit', 'contain', 'important');
        img.style.setProperty('object-position', 'center', 'important');
      });

      // Ajuster les conteneurs des images
      const pictoContainers = document.querySelectorAll('.picto-produit > div:first-child');
      pictoContainers.forEach(container => {
        container.style.setProperty('width', '100%', 'important');
        container.style.setProperty('height', '40px', 'important');
        container.style.setProperty('max-height', '40px', 'important');
        container.style.setProperty('display', 'flex', 'important');
        container.style.setProperty('align-items', 'center', 'important');
        container.style.setProperty('justify-content', 'center', 'important');
        container.style.setProperty('overflow', 'hidden', 'important');
      });
    }
  };

  // Fonction pour forcer le style flex sur le wrapper du guide des tailles
  const fixSizeGuideLayout = () => {
    const wrappers = document.querySelectorAll('.variant-label-row');
    wrappers.forEach(wrapper => {
      wrapper.style.setProperty('display', 'flex', 'important');
      wrapper.style.setProperty('justify-content', 'space-between', 'important');
      wrapper.style.setProperty('align-items', 'center', 'important');
      wrapper.style.setProperty('width', '100%', 'important');
    });
  };

  // Fonction pour protéger le contenu de livraison dynamique
  const protectDynamicShipping = () => {
    const shippingElement = document.getElementById('dynamic-shipping-text');
    if (shippingElement && shippingElement.getAttribute('data-dynamic-updated') === 'true') {
      // Ne pas toucher au texte s'il a été mis à jour dynamiquement
      return;
    }
  };
  
  // Exécuter immédiatement et à intervalles
  protectTitle();
  adjustPictosOnMobile();
  adjustPictosOnDesktop();
  fixSizeGuideLayout();
  protectDynamicShipping();
  setTimeout(protectTitle, 50);
  setTimeout(adjustPictosOnMobile, 50);
  setTimeout(adjustPictosOnDesktop, 50);
  setTimeout(fixSizeGuideLayout, 50);
  setTimeout(protectDynamicShipping, 50);
  setTimeout(protectTitle, 100);
  setTimeout(adjustPictosOnMobile, 100);
  setTimeout(adjustPictosOnDesktop, 100);
  setTimeout(fixSizeGuideLayout, 100);
  setTimeout(protectDynamicShipping, 100);
  setTimeout(protectTitle, 200);
  setTimeout(adjustPictosOnMobile, 200);
  setTimeout(adjustPictosOnDesktop, 200);
  setTimeout(fixSizeGuideLayout, 200);
  setTimeout(protectDynamicShipping, 200);
  setTimeout(protectTitle, 500);
  setTimeout(adjustPictosOnMobile, 500);
  setTimeout(adjustPictosOnDesktop, 500);
  setTimeout(fixSizeGuideLayout, 500);
  setTimeout(protectDynamicShipping, 500);
  setTimeout(protectTitle, 1000);
  setTimeout(adjustPictosOnMobile, 1000);
  setTimeout(adjustPictosOnDesktop, 1000);
  setTimeout(fixSizeGuideLayout, 1000);
  setTimeout(protectDynamicShipping, 1000);
  setTimeout(protectTitle, 2000);
  setTimeout(adjustPictosOnMobile, 2000);
  setTimeout(adjustPictosOnDesktop, 2000);
  setTimeout(fixSizeGuideLayout, 2000);
  setTimeout(protectDynamicShipping, 2000);
  
  // Observer continu
  setInterval(protectTitle, 1000);
  setInterval(adjustPictosOnMobile, 1000);
  setInterval(adjustPictosOnDesktop, 1000);
  setInterval(fixSizeGuideLayout, 1000);
  setInterval(protectDynamicShipping, 1000);
  
  // Debug : surveiller les scroll automatiques non désirés
  if (isMobile()) {
    let isUserScrolling = false;
    
    window.addEventListener('scroll', function() {
      if (!isUserScrolling) {
        console.log('Scroll automatique détecté');
      }
    }, { passive: true });
    
    // Marquer quand l'utilisateur scroll intentionnellement
    document.addEventListener('touchstart', function() {
      isUserScrolling = true;
      setTimeout(() => { isUserScrolling = false; }, 300);
    }, { passive: true });
  }
  
  // Re-calculer lors du redimensionnement de la fenêtre
  window.addEventListener('resize', function() {
    setTimeout(() => {
      updateGalleryDisplay();
      initializeSwipe();
      protectTitle(); // Reprotéger le titre
      adjustPictosOnMobile(); // Réajuster les pictos mobile
      adjustPictosOnDesktop(); // Réajuster les pictos desktop
      fixSizeGuideLayout(); // Refixer le layout du guide des tailles
      protectDynamicShipping(); // Protéger le texte de livraison
    }, 100);
  });
});
</script>

{% schema %}
{
  "name": "Product Hero",
  "tag": "section",
  "class": "Section-produit-fiche",
  "settings": [
    {
      "type": "checkbox",
      "id": "show_shipping_info",
      "label": "Afficher les informations de livraison",
      "default": true
    },
    {
      "type": "text",
      "id": "shipping_text",
      "label": "Texte de livraison",
      "default": "Livraison 1 - 3 jours"
    }
  ],
  "blocks": [
    {
      "type": "picto-produit",
      "name": "Picto produit",
      "limit": 6,
      "settings": [
        {
          "type": "image_picker",
          "id": "picto_image",
          "label": "Image du picto"
        },
        {
          "type": "text",
          "id": "picto_text",
          "label": "Texte du picto",
          "default": "Souple"
        },
        {
          "type": "text",
          "id": "picto_alt",
          "label": "Texte alternatif de l'image"
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "Product Hero",
      "category": "Liquify"
    }
  ],
  "enabled_on": {
    "templates": ["product"]
  }
}
{% endschema %}
